
segment_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002760  08002760  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002760  08002760  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002760  08002760  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000020  08002784  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002784  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b0e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011a2  00000000  00000000  00025b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  00026d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  00027380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035f1  00000000  00000000  00027968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ebc  00000000  00000000  0002af59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075d8b  00000000  00000000  0002fe15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a5ba0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b8  00000000  00000000  000a5bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002730 	.word	0x08002730

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08002730 	.word	0x08002730

080001c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	fa93 f3a3 	rbit	r3, r3
 80001e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	fab3 f383 	clz	r3, r3
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001fa:	69fb      	ldr	r3, [r7, #28]
 80001fc:	fa93 f3a3 	rbit	r3, r3
 8000200:	61bb      	str	r3, [r7, #24]
  return(result);
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	fab3 f383 	clz	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	fa01 f303 	lsl.w	r3, r1, r3
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3724      	adds	r7, #36	; 0x24
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fb01 f303 	mul.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	605a      	str	r2, [r3, #4]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000252:	b480      	push	{r7}
 8000254:	b089      	sub	sp, #36	; 0x24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	fa93 f3a3 	rbit	r3, r3
 800026c:	613b      	str	r3, [r7, #16]
  return(result);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	2103      	movs	r1, #3
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	43db      	mvns	r3, r3
 800027e:	401a      	ands	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	61bb      	str	r3, [r7, #24]
  return(result);
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	; 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa93 f3a3 	rbit	r3, r3
 80002c6:	613b      	str	r3, [r7, #16]
  return(result);
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	fab3 f383 	clz	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3724      	adds	r7, #36	; 0x24
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000306:	b480      	push	{r7}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa93 f3a3 	rbit	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  return(result);
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	fab3 f383 	clz	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	fa93 f3a3 	rbit	r3, r3
 800033e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fab3 f383 	clz	r3, r3
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000354:	bf00      	nop
 8000356:	3724      	adds	r7, #36	; 0x24
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	613b      	str	r3, [r7, #16]
  return(result);
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	210f      	movs	r1, #15
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b088      	sub	sp, #32
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	fa93 f3a3 	rbit	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
  return(result);
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e6:	e048      	b.n	800047a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d03a      	beq.n	8000474 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	461a      	mov	r2, r3
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fede 	bl	80001c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d003      	beq.n	800041c <LL_GPIO_Init+0x5e>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d106      	bne.n	800042a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	461a      	mov	r2, r3
 8000422:	69b9      	ldr	r1, [r7, #24]
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff14 	bl	8000252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	461a      	mov	r2, r3
 8000430:	69b9      	ldr	r1, [r7, #24]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff3a 	bl	80002ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d119      	bne.n	8000474 <LL_GPIO_Init+0xb6>
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	60bb      	str	r3, [r7, #8]
  return(result);
 800044c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	2b07      	cmp	r3, #7
 8000454:	d807      	bhi.n	8000466 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	461a      	mov	r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ff51 	bl	8000306 <LL_GPIO_SetAFPin_0_7>
 8000464:	e006      	b.n	8000474 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff76 	bl	8000360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3301      	adds	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1af      	bne.n	80003e8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <LL_GPIO_Init+0xda>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d107      	bne.n	80004a8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff febd 	bl	8000222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	641a      	str	r2, [r3, #64]	; 0x40
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0201 	orr.w	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	615a      	str	r2, [r3, #20]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <LL_TIM_Init+0xd4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d007      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f2:	d003      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <LL_TIM_Init+0xd8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4313      	orrs	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <LL_TIM_Init+0xd4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d013      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d00f      	beq.n	800063a <LL_TIM_Init+0x6a>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <LL_TIM_Init+0xd8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d00b      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <LL_TIM_Init+0xdc>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d007      	beq.n	800063a <LL_TIM_Init+0x6a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <LL_TIM_Init+0xe0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d003      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4313      	orrs	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff3a 	bl	80004ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff26 	bl	80004b2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <LL_TIM_Init+0xd4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00b      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <LL_TIM_Init+0xdc>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d007      	beq.n	8000686 <LL_TIM_Init+0xb6>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LL_TIM_Init+0xe0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d003      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d105      	bne.n	8000692 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	7c1b      	ldrb	r3, [r3, #16]
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff2c 	bl	80004ea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff8b 	bl	80005ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	40000400 	.word	0x40000400
 80006ac:	40014000 	.word	0x40014000
 80006b0:	40014400 	.word	0x40014400
 80006b4:	40014800 	.word	0x40014800

080006b8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006ce:	d045      	beq.n	800075c <LL_TIM_OC_Init+0xa4>
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006d6:	d848      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006de:	d036      	beq.n	800074e <LL_TIM_OC_Init+0x96>
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e6:	d840      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006ee:	d027      	beq.n	8000740 <LL_TIM_OC_Init+0x88>
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f6:	d838      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006fe:	d018      	beq.n	8000732 <LL_TIM_OC_Init+0x7a>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000706:	d830      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d003      	beq.n	8000716 <LL_TIM_OC_Init+0x5e>
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2b10      	cmp	r3, #16
 8000712:	d007      	beq.n	8000724 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000714:	e029      	b.n	800076a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f000 f82d 	bl	8000778 <OC1Config>
 800071e:	4603      	mov	r3, r0
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	e023      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 f8a6 	bl	8000878 <OC2Config>
 800072c:	4603      	mov	r3, r0
 800072e:	75fb      	strb	r3, [r7, #23]
      break;
 8000730:	e01c      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f000 f923 	bl	8000980 <OC3Config>
 800073a:	4603      	mov	r3, r0
 800073c:	75fb      	strb	r3, [r7, #23]
      break;
 800073e:	e015      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f000 f9a0 	bl	8000a88 <OC4Config>
 8000748:	4603      	mov	r3, r0
 800074a:	75fb      	strb	r3, [r7, #23]
      break;
 800074c:	e00e      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 fa05 	bl	8000b60 <OC5Config>
 8000756:	4603      	mov	r3, r0
 8000758:	75fb      	strb	r3, [r7, #23]
      break;
 800075a:	e007      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f000 fa60 	bl	8000c24 <OC6Config>
 8000764:	4603      	mov	r3, r0
 8000766:	75fb      	strb	r3, [r7, #23]
      break;
 8000768:	e000      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      break;
 800076a:	bf00      	nop
  }

  return result;
 800076c:	7dfb      	ldrb	r3, [r7, #23]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6a1b      	ldr	r3, [r3, #32]
 8000792:	f023 0201 	bic.w	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6a1b      	ldr	r3, [r3, #32]
 800079e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f023 0303 	bic.w	r3, r3, #3
 80007b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	6812      	ldr	r2, [r2, #0]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	f023 0202 	bic.w	r2, r3, #2
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	f023 0201 	bic.w	r2, r3, #1
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a20      	ldr	r2, [pc, #128]	; (8000868 <OC1Config+0xf0>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d00b      	beq.n	8000802 <OC1Config+0x8a>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <OC1Config+0xf4>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d007      	beq.n	8000802 <OC1Config+0x8a>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <OC1Config+0xf8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d003      	beq.n	8000802 <OC1Config+0x8a>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <OC1Config+0xfc>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d11e      	bne.n	8000840 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f023 0208 	bic.w	r2, r3, #8
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4313      	orrs	r3, r2
 8000810:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	f023 0204 	bic.w	r2, r3, #4
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4313      	orrs	r3, r2
 8000820:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4313      	orrs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fe57 	bl	8000506 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40012c00 	.word	0x40012c00
 800086c:	40014000 	.word	0x40014000
 8000870:	40014400 	.word	0x40014400
 8000874:	40014800 	.word	0x40014800

08000878 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a1b      	ldr	r3, [r3, #32]
 8000892:	f023 0210 	bic.w	r2, r3, #16
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	0212      	lsls	r2, r2, #8
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f023 0220 	bic.w	r2, r3, #32
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	4313      	orrs	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f023 0210 	bic.w	r2, r3, #16
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <OC2Config+0xf8>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d00b      	beq.n	8000908 <OC2Config+0x90>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <OC2Config+0xfc>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d007      	beq.n	8000908 <OC2Config+0x90>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <OC2Config+0x100>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d003      	beq.n	8000908 <OC2Config+0x90>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <OC2Config+0x104>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d11f      	bne.n	8000948 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	019b      	lsls	r3, r3, #6
 8000914:	4313      	orrs	r3, r2
 8000916:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	019b      	lsls	r3, r3, #6
 8000924:	4313      	orrs	r3, r2
 8000926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fde1 	bl	8000522 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012c00 	.word	0x40012c00
 8000974:	40014000 	.word	0x40014000
 8000978:	40014400 	.word	0x40014400
 800097c:	40014800 	.word	0x40014800

08000980 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f023 0303 	bic.w	r3, r3, #3
 80009ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	4313      	orrs	r3, r2
 80009dc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	4313      	orrs	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <OC3Config+0xf8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00b      	beq.n	8000a0e <OC3Config+0x8e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <OC3Config+0xfc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <OC3Config+0x8e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <OC3Config+0x100>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d003      	beq.n	8000a0e <OC3Config+0x8e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <OC3Config+0x104>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d11f      	bne.n	8000a4e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	029b      	lsls	r3, r3, #10
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	029b      	lsls	r3, r3, #10
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	015b      	lsls	r3, r3, #5
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fd6c 	bl	800053e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40014000 	.word	0x40014000
 8000a80:	40014400 	.word	0x40014400
 8000a84:	40014800 	.word	0x40014800

08000a88 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ac2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	0212      	lsls	r2, r2, #8
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	031b      	lsls	r3, r3, #12
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	031b      	lsls	r3, r3, #12
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <OC4Config+0xc8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d00b      	beq.n	8000b18 <OC4Config+0x90>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <OC4Config+0xcc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d007      	beq.n	8000b18 <OC4Config+0x90>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <OC4Config+0xd0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d003      	beq.n	8000b18 <OC4Config+0x90>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <OC4Config+0xd4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d107      	bne.n	8000b28 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	019b      	lsls	r3, r3, #6
 8000b24:	4313      	orrs	r3, r2
 8000b26:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fd0d 	bl	800055a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	40014000 	.word	0x40014000
 8000b58:	40014400 	.word	0x40014400
 8000b5c:	40014800 	.word	0x40014800

08000b60 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	041b      	lsls	r3, r3, #16
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	041b      	lsls	r3, r3, #16
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <OC5Config+0xb4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d00b      	beq.n	8000bdc <OC5Config+0x7c>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <OC5Config+0xb8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d007      	beq.n	8000bdc <OC5Config+0x7c>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <OC5Config+0xbc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d003      	beq.n	8000bdc <OC5Config+0x7c>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <OC5Config+0xc0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d109      	bne.n	8000bf0 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fcba 	bl	8000576 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012c00 	.word	0x40012c00
 8000c18:	40014000 	.word	0x40014000
 8000c1c:	40014400 	.word	0x40014400
 8000c20:	40014800 	.word	0x40014800

08000c24 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a1b      	ldr	r3, [r3, #32]
 8000c3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	0212      	lsls	r2, r2, #8
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	051b      	lsls	r3, r3, #20
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	051b      	lsls	r3, r3, #20
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <OC6Config+0xb4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00b      	beq.n	8000ca2 <OC6Config+0x7e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <OC6Config+0xb8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d007      	beq.n	8000ca2 <OC6Config+0x7e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <OC6Config+0xbc>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d003      	beq.n	8000ca2 <OC6Config+0x7e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <OC6Config+0xc0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d109      	bne.n	8000cb6 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fc65 	bl	8000592 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40014000 	.word	0x40014000
 8000ce0:	40014400 	.word	0x40014400
 8000ce4:	40014800 	.word	0x40014800

08000ce8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <LL_InitTick+0x30>)
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <LL_InitTick+0x30>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <LL_InitTick+0x30>)
 8000d08:	2205      	movs	r2, #5
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ffdd 	bl	8000ce8 <LL_InitTick>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <LL_mDelay+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d46:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4e:	d00c      	beq.n	8000d6a <LL_mDelay+0x32>
  {
    Delay++;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3301      	adds	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000d56:	e008      	b.n	8000d6a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <LL_mDelay+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <LL_mDelay+0x32>
    {
      Delay--;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f3      	bne.n	8000d58 <LL_mDelay+0x20>
    }
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <LL_SetSystemCoreClock+0x1c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000018 	.word	0x20000018

08000da4 <LL_TIM_ClearFlag_UPDATE>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f06f 0201 	mvn.w	r2, #1
 8000db2:	611a      	str	r2, [r3, #16]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	619a      	str	r2, [r3, #24]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f7ff ffdb 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f7ff ffd5 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <resetSegments+0x58>)
 8000e40:	f7ff ffd1 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000e44:	2120      	movs	r1, #32
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <resetSegments+0x58>)
 8000e48:	f7ff ffcd 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <resetSegments+0x58>)
 8000e50:	f7ff ffc9 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000e54:	2101      	movs	r1, #1
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f7ff ffc4 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000e5e:	2102      	movs	r1, #2
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f7ff ffbf 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000e68:	2108      	movs	r1, #8
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f7ff ffba 	bl	8000de6 <LL_GPIO_SetOutputPin>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	48000400 	.word	0x48000400

08000e7c <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f7ff ffbb 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f7ff ffb5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e98:	2102      	movs	r1, #2
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <setSegments+0x58>)
 8000e9c:	f7ff ffb1 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <setSegments+0x58>)
 8000ea4:	f7ff ffad 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <setSegments+0x58>)
 8000eac:	f7ff ffa9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f7ff ffa4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000eba:	2102      	movs	r1, #2
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f7ff ff9f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f7ff ff9a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000edc:	2104      	movs	r1, #4
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f7ff ff8e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f7ff ff89 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f7ff ff84 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f7ff ff7f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f7ff ff7a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000f16:	2120      	movs	r1, #32
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f7ff ff63 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000f20:	2110      	movs	r1, #16
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f7ff ff5e 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f7ff ff59 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000f34:	2104      	movs	r1, #4
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f7ff ff54 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f7ff ff4f 	bl	8000de6 <LL_GPIO_SetOutputPin>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <setDecimalPoint>:

void setDecimalPoint(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8000f50:	2102      	movs	r1, #2
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <setDecimalPoint+0x10>)
 8000f54:	f7ff ff55 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	48000400 	.word	0x48000400

08000f60 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f64:	2101      	movs	r1, #1
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f7ff ff4a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f7ff ff44 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <setTwo>:

void setTwo(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f84:	2101      	movs	r1, #1
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f7ff ff3a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f7ff ff35 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f98:	2110      	movs	r1, #16
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <setTwo+0x38>)
 8000f9c:	f7ff ff31 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f7ff ff2b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000fac:	2120      	movs	r1, #32
 8000fae:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <setTwo+0x38>)
 8000fb0:	f7ff ff27 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	48000400 	.word	0x48000400

08000fbc <setThree>:

void setThree(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f7ff ff1c 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000fca:	2102      	movs	r1, #2
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f7ff ff17 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000fd4:	2110      	movs	r1, #16
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <setThree+0x38>)
 8000fd8:	f7ff ff13 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe4:	f7ff ff0d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <setThree+0x38>)
 8000fec:	f7ff ff09 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <setFour>:

void setFour(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f7ff fefe 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001006:	2101      	movs	r1, #1
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f7ff fef9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001010:	2110      	movs	r1, #16
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <setFour+0x30>)
 8001014:	f7ff fef5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f7ff feef 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	48000400 	.word	0x48000400

0800102c <setFive>:

void setFive(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001030:	2108      	movs	r1, #8
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f7ff fee4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800103a:	2120      	movs	r1, #32
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <setFive+0x38>)
 800103e:	f7ff fee0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001042:	2110      	movs	r1, #16
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <setFive+0x38>)
 8001046:	f7ff fedc 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800104a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f7ff fed6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001056:	2102      	movs	r1, #2
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f7ff fed1 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	48000400 	.word	0x48000400

08001068 <setSix>:

void setSix(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800106c:	2108      	movs	r1, #8
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f7ff fec6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001076:	2120      	movs	r1, #32
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <setSix+0x44>)
 800107a:	f7ff fec2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800107e:	2110      	movs	r1, #16
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <setSix+0x44>)
 8001082:	f7ff febe 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f7ff feb8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001092:	2102      	movs	r1, #2
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f7ff feb3 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f7ff fead 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	48000400 	.word	0x48000400

080010b0 <setSeven>:

void setSeven(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80010b4:	2101      	movs	r1, #1
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f7ff fea2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80010be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f7ff fe9c 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80010ca:	2102      	movs	r1, #2
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f7ff fe97 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <setEight>:

void setEight(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80010dc:	2108      	movs	r1, #8
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f7ff fe8e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80010e6:	2120      	movs	r1, #32
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <setEight+0x50>)
 80010ea:	f7ff fe8a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80010ee:	2110      	movs	r1, #16
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <setEight+0x50>)
 80010f2:	f7ff fe86 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80010f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f7ff fe80 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001102:	2102      	movs	r1, #2
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f7ff fe7b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f7ff fe75 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001118:	2101      	movs	r1, #1
 800111a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111e:	f7ff fe70 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	48000400 	.word	0x48000400

0800112c <setNine>:

void setNine(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001130:	2101      	movs	r1, #1
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f7ff fe64 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f7ff fe5e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001146:	2102      	movs	r1, #2
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f7ff fe59 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001150:	2110      	movs	r1, #16
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <setNine+0x3c>)
 8001154:	f7ff fe55 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001158:	2108      	movs	r1, #8
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f7ff fe50 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	48000400 	.word	0x48000400

0800116c <setZero>:

void setZero(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001170:	2108      	movs	r1, #8
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f7ff fe44 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800117a:	2120      	movs	r1, #32
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <setZero+0x48>)
 800117e:	f7ff fe40 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f7ff fe3a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800118e:	2102      	movs	r1, #2
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f7ff fe35 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f7ff fe2f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80011a4:	2101      	movs	r1, #1
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f7ff fe2a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	48000400 	.word	0x48000400

080011b8 <setCapital_a>:

void setCapital_a(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80011bc:	2108      	movs	r1, #8
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f7ff fe1e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80011c6:	2110      	movs	r1, #16
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <setCapital_a+0x48>)
 80011ca:	f7ff fe1a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80011ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d6:	f7ff fe14 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80011da:	2102      	movs	r1, #2
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f7ff fe0f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80011e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f7ff fe09 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80011f0:	2101      	movs	r1, #1
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f7ff fe04 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	48000400 	.word	0x48000400

08001204 <setSmall_a>:

void setSmall_a(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	// A,B,C,E,D,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001208:	2120      	movs	r1, #32
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <setSmall_a+0x44>)
 800120c:	f7ff fdf9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001210:	2110      	movs	r1, #16
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <setSmall_a+0x44>)
 8001214:	f7ff fdf5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f7ff fdef 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001224:	2102      	movs	r1, #2
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f7ff fdea 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f7ff fde4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800123a:	2101      	movs	r1, #1
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f7ff fddf 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	48000400 	.word	0x48000400

0800124c <setSmall_b>:

void setSmall_b(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001250:	2108      	movs	r1, #8
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f7ff fdd4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800125a:	2110      	movs	r1, #16
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <setSmall_b+0x3c>)
 800125e:	f7ff fdd0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f7ff fdca 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800126e:	2120      	movs	r1, #32
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <setSmall_b+0x3c>)
 8001272:	f7ff fdc6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f7ff fdc0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	48000400 	.word	0x48000400

0800128c <setCapital_c>:

void setCapital_c(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001290:	2108      	movs	r1, #8
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f7ff fdb4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800129a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f7ff fdae 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80012a6:	2102      	movs	r1, #2
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ac:	f7ff fda9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80012b0:	2120      	movs	r1, #32
 80012b2:	4802      	ldr	r0, [pc, #8]	; (80012bc <setCapital_c+0x30>)
 80012b4:	f7ff fda5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	48000400 	.word	0x48000400

080012c0 <setSmall_c>:

void setSmall_c(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	// D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80012c4:	2120      	movs	r1, #32
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <setSmall_c+0x24>)
 80012c8:	f7ff fd9b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80012cc:	2110      	movs	r1, #16
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <setSmall_c+0x24>)
 80012d0:	f7ff fd97 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80012d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f7ff fd91 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	48000400 	.word	0x48000400

080012e8 <setSmall_d>:

void setSmall_d(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80012ec:	2120      	movs	r1, #32
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <setSmall_d+0x3c>)
 80012f0:	f7ff fd87 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80012f4:	2110      	movs	r1, #16
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <setSmall_d+0x3c>)
 80012f8:	f7ff fd83 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80012fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f7ff fd7d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001310:	f7ff fd77 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001314:	2101      	movs	r1, #1
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f7ff fd72 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	48000400 	.word	0x48000400

08001328 <setCapital_e>:

void setCapital_e(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800132c:	2108      	movs	r1, #8
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f7ff fd66 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001336:	2110      	movs	r1, #16
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <setCapital_e+0x38>)
 800133a:	f7ff fd62 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800133e:	2120      	movs	r1, #32
 8001340:	4807      	ldr	r0, [pc, #28]	; (8001360 <setCapital_e+0x38>)
 8001342:	f7ff fd5e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001346:	2102      	movs	r1, #2
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f7ff fd59 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f7ff fd53 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	48000400 	.word	0x48000400

08001364 <setCapital_f>:

void setCapital_f(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001368:	2108      	movs	r1, #8
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f7ff fd48 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001372:	2110      	movs	r1, #16
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <setCapital_f+0x30>)
 8001376:	f7ff fd44 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800137a:	2102      	movs	r1, #2
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f7ff fd3f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f7ff fd39 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	48000400 	.word	0x48000400

08001398 <setCapital_g>:

void setCapital_g(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800139c:	2108      	movs	r1, #8
 800139e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a2:	f7ff fd2e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80013a6:	2120      	movs	r1, #32
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <setCapital_g+0x3c>)
 80013aa:	f7ff fd2a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b6:	f7ff fd24 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80013ba:	2102      	movs	r1, #2
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f7ff fd1f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f7ff fd19 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	48000400 	.word	0x48000400

080013d8 <setCapital_h>:

void setCapital_h(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80013dc:	2108      	movs	r1, #8
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f7ff fd0e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80013e6:	2110      	movs	r1, #16
 80013e8:	480a      	ldr	r0, [pc, #40]	; (8001414 <setCapital_h+0x3c>)
 80013ea:	f7ff fd0a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f7ff fd04 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f7ff fcfe 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001406:	2101      	movs	r1, #1
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f7ff fcf9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	48000400 	.word	0x48000400

08001418 <setSmall_h>:

void setSmall_h(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	// C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800141c:	2108      	movs	r1, #8
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f7ff fcee 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001426:	2110      	movs	r1, #16
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <setSmall_h+0x34>)
 800142a:	f7ff fcea 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800142e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f7ff fce4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800143a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f7ff fcde 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	48000400 	.word	0x48000400

08001450 <setCapital_i>:

void setCapital_i(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001454:	2108      	movs	r1, #8
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f7ff fcd2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800145e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f7ff fccc 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <setCapital_j>:

void setCapital_j(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001474:	2120      	movs	r1, #32
 8001476:	480b      	ldr	r0, [pc, #44]	; (80014a4 <setCapital_j+0x34>)
 8001478:	f7ff fcc3 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800147c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f7ff fcbd 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f7ff fcb7 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001494:	2101      	movs	r1, #1
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f7ff fcb2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	48000400 	.word	0x48000400

080014a8 <setCapital_l>:

void setCapital_l(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80014ac:	2108      	movs	r1, #8
 80014ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b2:	f7ff fca6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80014b6:	2120      	movs	r1, #32
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <setCapital_l+0x28>)
 80014ba:	f7ff fca2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f7ff fc9c 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	48000400 	.word	0x48000400

080014d4 <setSmall_n>:

void setSmall_n(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014d8:	2110      	movs	r1, #16
 80014da:	4808      	ldr	r0, [pc, #32]	; (80014fc <setSmall_n+0x28>)
 80014dc:	f7ff fc91 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e8:	f7ff fc8b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f7ff fc85 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	48000400 	.word	0x48000400

08001500 <setCapital_o>:

void setCapital_o(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001504:	2108      	movs	r1, #8
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f7ff fc7a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800150e:	2120      	movs	r1, #32
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <setCapital_o+0x48>)
 8001512:	f7ff fc76 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f7ff fc70 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001522:	2102      	movs	r1, #2
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f7ff fc6b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800152c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f7ff fc65 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001538:	2101      	movs	r1, #1
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f7ff fc60 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	48000400 	.word	0x48000400

0800154c <setSmall_o>:

void setSmall_o(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	// C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001550:	2120      	movs	r1, #32
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <setSmall_o+0x30>)
 8001554:	f7ff fc55 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001558:	2110      	movs	r1, #16
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <setSmall_o+0x30>)
 800155c:	f7ff fc51 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f7ff fc4b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800156c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f7ff fc45 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	48000400 	.word	0x48000400

08001580 <setCapital_p>:

void setCapital_p(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001584:	2108      	movs	r1, #8
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f7ff fc3a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800158e:	2110      	movs	r1, #16
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <setCapital_p+0x3c>)
 8001592:	f7ff fc36 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001596:	2102      	movs	r1, #2
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f7ff fc31 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a8:	f7ff fc2b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80015ac:	2101      	movs	r1, #1
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b2:	f7ff fc26 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	48000400 	.word	0x48000400

080015c0 <setSmall_q>:

void setSmall_q(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015c4:	2108      	movs	r1, #8
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f7ff fc1a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015ce:	2110      	movs	r1, #16
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <setSmall_q+0x3c>)
 80015d2:	f7ff fc16 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f7ff fc10 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015e2:	2102      	movs	r1, #2
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f7ff fc0b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80015ec:	2101      	movs	r1, #1
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f7ff fc06 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	48000400 	.word	0x48000400

08001600 <setSmall_r>:

void setSmall_r(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001604:	2110      	movs	r1, #16
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <setSmall_r+0x1c>)
 8001608:	f7ff fbfb 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f7ff fbf5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	48000400 	.word	0x48000400

08001620 <setCapital_s>:

void setCapital_s(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001624:	2108      	movs	r1, #8
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f7ff fbea 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800162e:	2110      	movs	r1, #16
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <setCapital_s+0x38>)
 8001632:	f7ff fbe6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f7ff fbe0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001642:	2102      	movs	r1, #2
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f7ff fbdb 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800164c:	2120      	movs	r1, #32
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <setCapital_s+0x38>)
 8001650:	f7ff fbd7 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	48000400 	.word	0x48000400

0800165c <setSmall_t>:

void setSmall_t(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001660:	2108      	movs	r1, #8
 8001662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001666:	f7ff fbcc 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800166a:	2110      	movs	r1, #16
 800166c:	4807      	ldr	r0, [pc, #28]	; (800168c <setSmall_t+0x30>)
 800166e:	f7ff fbc8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001672:	2120      	movs	r1, #32
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <setSmall_t+0x30>)
 8001676:	f7ff fbc4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800167a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f7ff fbbe 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	48000400 	.word	0x48000400

08001690 <setCapital_u>:

void setCapital_u(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001694:	2108      	movs	r1, #8
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f7ff fbb2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800169e:	2120      	movs	r1, #32
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <setCapital_u+0x3c>)
 80016a2:	f7ff fbae 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f7ff fba8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80016b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f7ff fba2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016be:	2101      	movs	r1, #1
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f7ff fb9d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	48000400 	.word	0x48000400

080016d0 <setSmall_u>:

void setSmall_u(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	// C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016d4:	2120      	movs	r1, #32
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <setSmall_u+0x28>)
 80016d8:	f7ff fb93 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e4:	f7ff fb8d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80016e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f7ff fb87 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	48000400 	.word	0x48000400

080016fc <setSmall_y>:

void setSmall_y(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001700:	2108      	movs	r1, #8
 8001702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001706:	f7ff fb7c 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800170a:	2110      	movs	r1, #16
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <setSmall_y+0x38>)
 800170e:	f7ff fb78 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f7ff fb72 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800171e:	2120      	movs	r1, #32
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <setSmall_y+0x38>)
 8001722:	f7ff fb6e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001726:	2101      	movs	r1, #1
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f7ff fb69 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	48000400 	.word	0x48000400

08001738 <setCapital_k>:

void setCapital_k(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	// A,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800173c:	2108      	movs	r1, #8
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f7ff fb5e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001746:	2110      	movs	r1, #16
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <setCapital_k+0x3c>)
 800174a:	f7ff fb5a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f7ff fb54 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800175a:	2102      	movs	r1, #2
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f7ff fb4f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f7ff fb49 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	48000400 	.word	0x48000400

08001778 <setCapital_m>:

void setCapital_m(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	// A,E,C
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f7ff fb3d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f7ff fb37 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001794:	2102      	movs	r1, #2
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f7ff fb32 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <setCapital_v>:

void setCapital_v(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	// D,C,B,F
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80017a8:	2120      	movs	r1, #32
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <setCapital_v+0x30>)
 80017ac:	f7ff fb29 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f7ff fb23 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80017bc:	2101      	movs	r1, #1
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f7ff fb1e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80017c6:	2108      	movs	r1, #8
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f7ff fb19 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	48000400 	.word	0x48000400

080017d8 <setCapital_w>:

void setCapital_w(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	// D,F,B
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80017dc:	2120      	movs	r1, #32
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <setCapital_w+0x24>)
 80017e0:	f7ff fb0f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80017e4:	2108      	movs	r1, #8
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f7ff fb0a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80017ee:	2101      	movs	r1, #1
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f7ff fb05 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	48000400 	.word	0x48000400

08001800 <setCapital_x>:

void setCapital_x(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001804:	2101      	movs	r1, #1
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f7ff fafa 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800180e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f7ff faf4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800181a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f7ff faee 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001826:	2108      	movs	r1, #8
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f7ff fae9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001830:	2110      	movs	r1, #16
 8001832:	4802      	ldr	r0, [pc, #8]	; (800183c <setCapital_x+0x3c>)
 8001834:	f7ff fae5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	48000400 	.word	0x48000400

08001840 <setCapital_z>:

void setCapital_z(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	// A,B,D,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001844:	2120      	movs	r1, #32
 8001846:	4809      	ldr	r0, [pc, #36]	; (800186c <setCapital_z+0x2c>)
 8001848:	f7ff fadb 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800184c:	2102      	movs	r1, #2
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f7ff fad6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001856:	2101      	movs	r1, #1
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f7ff fad1 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001860:	2110      	movs	r1, #16
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <setCapital_z+0x2c>)
 8001864:	f7ff facd 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	48000400 	.word	0x48000400

08001870 <setUnderline>:


void setUnderline(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001874:	2120      	movs	r1, #32
 8001876:	4802      	ldr	r0, [pc, #8]	; (8001880 <setUnderline+0x10>)
 8001878:	f7ff fac3 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	48000400 	.word	0x48000400

08001884 <displayName>:
/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayName(char *message)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	dDisplayData.digit_num = 4;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <displayName+0x50>)
 800188e:	2204      	movs	r2, #4
 8001890:	711a      	strb	r2, [r3, #4]
	dDisplayData.negative = 0;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <displayName+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	715a      	strb	r2, [r3, #5]
	dDisplayData.resolution = 0;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <displayName+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	719a      	strb	r2, [r3, #6]

	for (int i = 0; i < 4; i++) {
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e00c      	b.n	80018be <displayName+0x3a>
		dDisplayData.digit[i] = *message;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <displayName+0x50>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	460a      	mov	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
		*message++;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3301      	adds	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	ddef      	ble.n	80018a4 <displayName+0x20>
	}
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2000003c 	.word	0x2000003c

080018d8 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d823      	bhi.n	8001930 <setDigit+0x58>
 80018e8:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <setDigit+0x18>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001901 	.word	0x08001901
 80018f4:	0800190d 	.word	0x0800190d
 80018f8:	08001919 	.word	0x08001919
 80018fc:	08001925 	.word	0x08001925
	{
		case 0:
			DIGIT_1_ON;
 8001900:	2120      	movs	r1, #32
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f7ff fa6e 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 800190a:	e011      	b.n	8001930 <setDigit+0x58>
		case 1:
			DIGIT_2_ON;
 800190c:	2110      	movs	r1, #16
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f7ff fa68 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 8001916:	e00b      	b.n	8001930 <setDigit+0x58>
		case 2:
			DIGIT_3_ON;
 8001918:	2140      	movs	r1, #64	; 0x40
 800191a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191e:	f7ff fa62 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 8001922:	e005      	b.n	8001930 <setDigit+0x58>
		case 3:
			DIGIT_4_ON;
 8001924:	2104      	movs	r1, #4
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f7ff fa5c 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 800192e:	bf00      	nop
	}
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	e1e7      	b.n	8001d14 <updateDisplay+0x3dc>
	{
		switch(dDisplayData.digit[i])
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4ad3      	ldr	r2, [pc, #844]	; (8001c94 <updateDisplay+0x35c>)
 8001948:	5cd3      	ldrb	r3, [r2, r3]
 800194a:	3b30      	subs	r3, #48	; 0x30
 800194c:	2b49      	cmp	r3, #73	; 0x49
 800194e:	f200 81bf 	bhi.w	8001cd0 <updateDisplay+0x398>
 8001952:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <updateDisplay+0x20>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001a81 	.word	0x08001a81
 800195c:	08001a8f 	.word	0x08001a8f
 8001960:	08001a9d 	.word	0x08001a9d
 8001964:	08001aab 	.word	0x08001aab
 8001968:	08001ab9 	.word	0x08001ab9
 800196c:	08001ac7 	.word	0x08001ac7
 8001970:	08001ad5 	.word	0x08001ad5
 8001974:	08001ae3 	.word	0x08001ae3
 8001978:	08001af1 	.word	0x08001af1
 800197c:	08001aff 	.word	0x08001aff
 8001980:	08001cd1 	.word	0x08001cd1
 8001984:	08001cd1 	.word	0x08001cd1
 8001988:	08001cd1 	.word	0x08001cd1
 800198c:	08001cd1 	.word	0x08001cd1
 8001990:	08001cd1 	.word	0x08001cd1
 8001994:	08001cd1 	.word	0x08001cd1
 8001998:	08001cd1 	.word	0x08001cd1
 800199c:	08001b0d 	.word	0x08001b0d
 80019a0:	08001cd1 	.word	0x08001cd1
 80019a4:	08001b37 	.word	0x08001b37
 80019a8:	08001cd1 	.word	0x08001cd1
 80019ac:	08001b61 	.word	0x08001b61
 80019b0:	08001b6f 	.word	0x08001b6f
 80019b4:	08001b7d 	.word	0x08001b7d
 80019b8:	08001b8b 	.word	0x08001b8b
 80019bc:	08001ba7 	.word	0x08001ba7
 80019c0:	08001bb5 	.word	0x08001bb5
 80019c4:	08001c6b 	.word	0x08001c6b
 80019c8:	08001bc3 	.word	0x08001bc3
 80019cc:	08001c79 	.word	0x08001c79
 80019d0:	08001cd1 	.word	0x08001cd1
 80019d4:	08001bdf 	.word	0x08001bdf
 80019d8:	08001bfb 	.word	0x08001bfb
 80019dc:	08001cd1 	.word	0x08001cd1
 80019e0:	08001cd1 	.word	0x08001cd1
 80019e4:	08001c25 	.word	0x08001c25
 80019e8:	08001cd1 	.word	0x08001cd1
 80019ec:	08001c41 	.word	0x08001c41
 80019f0:	08001c87 	.word	0x08001c87
 80019f4:	08001c99 	.word	0x08001c99
 80019f8:	08001ca7 	.word	0x08001ca7
 80019fc:	08001cd1 	.word	0x08001cd1
 8001a00:	08001cb5 	.word	0x08001cb5
 8001a04:	08001cd1 	.word	0x08001cd1
 8001a08:	08001cd1 	.word	0x08001cd1
 8001a0c:	08001cd1 	.word	0x08001cd1
 8001a10:	08001cd1 	.word	0x08001cd1
 8001a14:	08001cc3 	.word	0x08001cc3
 8001a18:	08001cd1 	.word	0x08001cd1
 8001a1c:	08001b1b 	.word	0x08001b1b
 8001a20:	08001b29 	.word	0x08001b29
 8001a24:	08001b45 	.word	0x08001b45
 8001a28:	08001b53 	.word	0x08001b53
 8001a2c:	08001cd1 	.word	0x08001cd1
 8001a30:	08001cd1 	.word	0x08001cd1
 8001a34:	08001cd1 	.word	0x08001cd1
 8001a38:	08001b99 	.word	0x08001b99
 8001a3c:	08001cd1 	.word	0x08001cd1
 8001a40:	08001cd1 	.word	0x08001cd1
 8001a44:	08001cd1 	.word	0x08001cd1
 8001a48:	08001cd1 	.word	0x08001cd1
 8001a4c:	08001cd1 	.word	0x08001cd1
 8001a50:	08001bd1 	.word	0x08001bd1
 8001a54:	08001bed 	.word	0x08001bed
 8001a58:	08001cd1 	.word	0x08001cd1
 8001a5c:	08001c09 	.word	0x08001c09
 8001a60:	08001c17 	.word	0x08001c17
 8001a64:	08001cd1 	.word	0x08001cd1
 8001a68:	08001c33 	.word	0x08001c33
 8001a6c:	08001c4f 	.word	0x08001c4f
 8001a70:	08001cd1 	.word	0x08001cd1
 8001a74:	08001cd1 	.word	0x08001cd1
 8001a78:	08001cd1 	.word	0x08001cd1
 8001a7c:	08001c5d 	.word	0x08001c5d
		{
			case '0':
			  setDigit(i);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff28 	bl	80018d8 <setDigit>
			  setZero();
 8001a88:	f7ff fb70 	bl	800116c <setZero>
			  break;
 8001a8c:	e120      	b.n	8001cd0 <updateDisplay+0x398>
			case '1':
			  setDigit(i);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff21 	bl	80018d8 <setDigit>
			  setOne();
 8001a96:	f7ff fa63 	bl	8000f60 <setOne>
			  break;
 8001a9a:	e119      	b.n	8001cd0 <updateDisplay+0x398>
			case '2':
			  setDigit(i);
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff1a 	bl	80018d8 <setDigit>
			  setTwo();
 8001aa4:	f7ff fa6c 	bl	8000f80 <setTwo>
			  break;
 8001aa8:	e112      	b.n	8001cd0 <updateDisplay+0x398>
			case '3':
			  setDigit(i);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff13 	bl	80018d8 <setDigit>
			  setThree();
 8001ab2:	f7ff fa83 	bl	8000fbc <setThree>
			  break;
 8001ab6:	e10b      	b.n	8001cd0 <updateDisplay+0x398>
			case '4':
			  setDigit(i);
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff0c 	bl	80018d8 <setDigit>
			  setFour();
 8001ac0:	f7ff fa9a 	bl	8000ff8 <setFour>
			  break;
 8001ac4:	e104      	b.n	8001cd0 <updateDisplay+0x398>
			case '5':
			  setDigit(i);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff05 	bl	80018d8 <setDigit>
			  setFive();
 8001ace:	f7ff faad 	bl	800102c <setFive>
			  break;
 8001ad2:	e0fd      	b.n	8001cd0 <updateDisplay+0x398>
			case '6':
			  setDigit(i);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fefe 	bl	80018d8 <setDigit>
			  setSix();
 8001adc:	f7ff fac4 	bl	8001068 <setSix>
			  break;
 8001ae0:	e0f6      	b.n	8001cd0 <updateDisplay+0x398>
			case '7':
			  setDigit(i);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fef7 	bl	80018d8 <setDigit>
			  setSeven();
 8001aea:	f7ff fae1 	bl	80010b0 <setSeven>
			  break;
 8001aee:	e0ef      	b.n	8001cd0 <updateDisplay+0x398>
			case '8':
			  setDigit(i);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fef0 	bl	80018d8 <setDigit>
			  setEight();
 8001af8:	f7ff faee 	bl	80010d8 <setEight>
			  break;
 8001afc:	e0e8      	b.n	8001cd0 <updateDisplay+0x398>
			case '9':
			  setDigit(i);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fee9 	bl	80018d8 <setDigit>
			  setNine();
 8001b06:	f7ff fb11 	bl	800112c <setNine>
			  break;
 8001b0a:	e0e1      	b.n	8001cd0 <updateDisplay+0x398>
			case 'A':
			  setDigit(i);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fee2 	bl	80018d8 <setDigit>
			  setCapital_a();
 8001b14:	f7ff fb50 	bl	80011b8 <setCapital_a>
			  break;
 8001b18:	e0da      	b.n	8001cd0 <updateDisplay+0x398>
			case 'a':
			  setDigit(i);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fedb 	bl	80018d8 <setDigit>
			  setSmall_a();
 8001b22:	f7ff fb6f 	bl	8001204 <setSmall_a>
			  break;
 8001b26:	e0d3      	b.n	8001cd0 <updateDisplay+0x398>
			case 'b':
			  setDigit(i);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fed4 	bl	80018d8 <setDigit>
			  setSmall_b();
 8001b30:	f7ff fb8c 	bl	800124c <setSmall_b>
			  break;
 8001b34:	e0cc      	b.n	8001cd0 <updateDisplay+0x398>
			case 'C':
			  setDigit(i);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fecd 	bl	80018d8 <setDigit>
			  setCapital_c();
 8001b3e:	f7ff fba5 	bl	800128c <setCapital_c>
			  break;
 8001b42:	e0c5      	b.n	8001cd0 <updateDisplay+0x398>
			case 'c':
			  setDigit(i);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fec6 	bl	80018d8 <setDigit>
			  setSmall_c();
 8001b4c:	f7ff fbb8 	bl	80012c0 <setSmall_c>
			  break;
 8001b50:	e0be      	b.n	8001cd0 <updateDisplay+0x398>
			case 'd':
			  setDigit(i);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff febf 	bl	80018d8 <setDigit>
			  setSmall_d();
 8001b5a:	f7ff fbc5 	bl	80012e8 <setSmall_d>
			  break;
 8001b5e:	e0b7      	b.n	8001cd0 <updateDisplay+0x398>
			case 'E':
			  setDigit(i);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff feb8 	bl	80018d8 <setDigit>
			  setCapital_e();
 8001b68:	f7ff fbde 	bl	8001328 <setCapital_e>
			  break;
 8001b6c:	e0b0      	b.n	8001cd0 <updateDisplay+0x398>
			case 'F':
			  setDigit(i);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff feb1 	bl	80018d8 <setDigit>
			  setCapital_f();
 8001b76:	f7ff fbf5 	bl	8001364 <setCapital_f>
			  break;
 8001b7a:	e0a9      	b.n	8001cd0 <updateDisplay+0x398>
			case 'G':
			  setDigit(i);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff feaa 	bl	80018d8 <setDigit>
			  setCapital_g();
 8001b84:	f7ff fc08 	bl	8001398 <setCapital_g>
			  break;
 8001b88:	e0a2      	b.n	8001cd0 <updateDisplay+0x398>
			case 'H':
			  setDigit(i);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fea3 	bl	80018d8 <setDigit>
			  setCapital_h();
 8001b92:	f7ff fc21 	bl	80013d8 <setCapital_h>
			  break;
 8001b96:	e09b      	b.n	8001cd0 <updateDisplay+0x398>
			case 'h':
			  setDigit(i);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fe9c 	bl	80018d8 <setDigit>
			  setSmall_h();
 8001ba0:	f7ff fc3a 	bl	8001418 <setSmall_h>
			  break;
 8001ba4:	e094      	b.n	8001cd0 <updateDisplay+0x398>
			case 'I':
			  setDigit(i);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fe95 	bl	80018d8 <setDigit>
			  setCapital_i();
 8001bae:	f7ff fc4f 	bl	8001450 <setCapital_i>
			  break;
 8001bb2:	e08d      	b.n	8001cd0 <updateDisplay+0x398>
			case 'J':
			  setDigit(i);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe8e 	bl	80018d8 <setDigit>
			  setCapital_j();
 8001bbc:	f7ff fc58 	bl	8001470 <setCapital_j>
			  break;
 8001bc0:	e086      	b.n	8001cd0 <updateDisplay+0x398>
			case 'L':
			  setDigit(i);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fe87 	bl	80018d8 <setDigit>
			  setCapital_l();
 8001bca:	f7ff fc6d 	bl	80014a8 <setCapital_l>
			  break;
 8001bce:	e07f      	b.n	8001cd0 <updateDisplay+0x398>
			case 'n':
			  setDigit(i);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fe80 	bl	80018d8 <setDigit>
			  setSmall_n();
 8001bd8:	f7ff fc7c 	bl	80014d4 <setSmall_n>
			  break;
 8001bdc:	e078      	b.n	8001cd0 <updateDisplay+0x398>
			case 'O':
			  setDigit(i);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe79 	bl	80018d8 <setDigit>
			  setCapital_o();
 8001be6:	f7ff fc8b 	bl	8001500 <setCapital_o>
			  break;
 8001bea:	e071      	b.n	8001cd0 <updateDisplay+0x398>
			case 'o':
			  setDigit(i);
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe72 	bl	80018d8 <setDigit>
			  setSmall_o();
 8001bf4:	f7ff fcaa 	bl	800154c <setSmall_o>
			  break;
 8001bf8:	e06a      	b.n	8001cd0 <updateDisplay+0x398>
			case 'P':
			  setDigit(i);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fe6b 	bl	80018d8 <setDigit>
			  setCapital_p();
 8001c02:	f7ff fcbd 	bl	8001580 <setCapital_p>
			  break;
 8001c06:	e063      	b.n	8001cd0 <updateDisplay+0x398>
			case 'q':
			  setDigit(i);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe64 	bl	80018d8 <setDigit>
			  setSmall_q();
 8001c10:	f7ff fcd6 	bl	80015c0 <setSmall_q>
			  break;
 8001c14:	e05c      	b.n	8001cd0 <updateDisplay+0x398>
			case 'r':
			  setDigit(i);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fe5d 	bl	80018d8 <setDigit>
			  setSmall_r();
 8001c1e:	f7ff fcef 	bl	8001600 <setSmall_r>
			  break;
 8001c22:	e055      	b.n	8001cd0 <updateDisplay+0x398>
			case 'S':
			  setDigit(i);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fe56 	bl	80018d8 <setDigit>
			  setCapital_s();
 8001c2c:	f7ff fcf8 	bl	8001620 <setCapital_s>
			  break;
 8001c30:	e04e      	b.n	8001cd0 <updateDisplay+0x398>
			case 't':
			  setDigit(i);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fe4f 	bl	80018d8 <setDigit>
			  setSmall_t();
 8001c3a:	f7ff fd0f 	bl	800165c <setSmall_t>
			  break;
 8001c3e:	e047      	b.n	8001cd0 <updateDisplay+0x398>
			case 'U':
			  setDigit(i);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fe48 	bl	80018d8 <setDigit>
			  setCapital_u();
 8001c48:	f7ff fd22 	bl	8001690 <setCapital_u>
			  break;
 8001c4c:	e040      	b.n	8001cd0 <updateDisplay+0x398>
			case 'u':
			  setDigit(i);
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fe41 	bl	80018d8 <setDigit>
			  setSmall_u();
 8001c56:	f7ff fd3b 	bl	80016d0 <setSmall_u>
			  break;
 8001c5a:	e039      	b.n	8001cd0 <updateDisplay+0x398>
			case 'y':
			  setDigit(i);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fe3a 	bl	80018d8 <setDigit>
			  setSmall_y();
 8001c64:	f7ff fd4a 	bl	80016fc <setSmall_y>
			  break;
 8001c68:	e032      	b.n	8001cd0 <updateDisplay+0x398>
			case 'K':
			  setDigit(i);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe33 	bl	80018d8 <setDigit>
			  setCapital_k();
 8001c72:	f7ff fd61 	bl	8001738 <setCapital_k>
			  break;
 8001c76:	e02b      	b.n	8001cd0 <updateDisplay+0x398>
			case 'M':
			  setDigit(i);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe2c 	bl	80018d8 <setDigit>
			  setCapital_m();
 8001c80:	f7ff fd7a 	bl	8001778 <setCapital_m>
			  break;
 8001c84:	e024      	b.n	8001cd0 <updateDisplay+0x398>
			case 'V':
			  setDigit(i);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fe25 	bl	80018d8 <setDigit>
			  setCapital_v();
 8001c8e:	f7ff fd89 	bl	80017a4 <setCapital_v>
			  break;
 8001c92:	e01d      	b.n	8001cd0 <updateDisplay+0x398>
 8001c94:	2000003c 	.word	0x2000003c
			case 'W':
			  setDigit(i);
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fe1c 	bl	80018d8 <setDigit>
			  setCapital_w();
 8001ca0:	f7ff fd9a 	bl	80017d8 <setCapital_w>
			  break;
 8001ca4:	e014      	b.n	8001cd0 <updateDisplay+0x398>
			case 'X':
			  setDigit(i);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe15 	bl	80018d8 <setDigit>
			  setCapital_x();
 8001cae:	f7ff fda7 	bl	8001800 <setCapital_x>
			  break;
 8001cb2:	e00d      	b.n	8001cd0 <updateDisplay+0x398>
			case 'Z':
			  setDigit(i);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fe0e 	bl	80018d8 <setDigit>
			  setCapital_z();
 8001cbc:	f7ff fdc0 	bl	8001840 <setCapital_z>
			  break;
 8001cc0:	e006      	b.n	8001cd0 <updateDisplay+0x398>
			case '_':
			  setDigit(i);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fe07 	bl	80018d8 <setDigit>
			  setUnderline();
 8001cca:	f7ff fdd1 	bl	8001870 <setUnderline>
			  break;
 8001cce:	bf00      	nop

		}

		if(dDisplayData.resolution == i)
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <updateDisplay+0x3f0>)
 8001cd2:	799b      	ldrb	r3, [r3, #6]
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d101      	bne.n	8001cde <updateDisplay+0x3a6>
		{
			setDecimalPoint();
 8001cda:	f7ff f937 	bl	8000f4c <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <updateDisplay+0x3f4>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	4912      	ldr	r1, [pc, #72]	; (8001d30 <updateDisplay+0x3f8>)
 8001ce6:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8001cea:	bf00      	nop
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <updateDisplay+0x3f8>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	1c94      	adds	r4, r2, #2
 8001cf4:	f143 0500 	adc.w	r5, r3, #0
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <updateDisplay+0x3f4>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	42ab      	cmp	r3, r5
 8001d00:	bf08      	it	eq
 8001d02:	42a2      	cmpeq	r2, r4
 8001d04:	d3f2      	bcc.n	8001cec <updateDisplay+0x3b4>

		resetDigits();
 8001d06:	f7ff f8e7 	bl	8000ed8 <resetDigits>
		resetSegments();
 8001d0a:	f7ff f889 	bl	8000e20 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	3301      	adds	r3, #1
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	f67f ae14 	bls.w	8001944 <updateDisplay+0xc>
	}
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bdb0      	pop	{r4, r5, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000003c 	.word	0x2000003c
 8001d2c:	20000048 	.word	0x20000048
 8001d30:	20000050 	.word	0x20000050

08001d34 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001d38:	4806      	ldr	r0, [pc, #24]	; (8001d54 <TIM3_IRQHandler+0x20>)
 8001d3a:	f7ff f841 	bl	8000dc0 <LL_TIM_IsActiveFlag_UPDATE>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8001d44:	f7ff fdf8 	bl	8001938 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM3_IRQHandler+0x20>)
 8001d4a:	f7ff f82b 	bl	8000da4 <LL_TIM_ClearFlag_UPDATE>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40000400 	.word	0x40000400

08001d58 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4013      	ands	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000

08001d88 <LL_GPIO_ResetOutputPin>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	463b      	mov	r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001dba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001dbe:	f7ff ffcb 	bl	8001d58 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001dc2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001dc6:	f7ff ffc7 	bl	8001d58 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001dca:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f7ff ffd9 	bl	8001d88 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001dd6:	2132      	movs	r1, #50	; 0x32
 8001dd8:	4813      	ldr	r0, [pc, #76]	; (8001e28 <MX_GPIO_Init+0x84>)
 8001dda:	f7ff ffd5 	bl	8001d88 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001dde:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8001de2:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001de4:	2301      	movs	r3, #1
 8001de6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	463b      	mov	r3, r7
 8001df6:	4619      	mov	r1, r3
 8001df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfc:	f7fe fadf 	bl	80003be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001e00:	2332      	movs	r3, #50	; 0x32
 8001e02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e04:	2301      	movs	r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	463b      	mov	r3, r7
 8001e16:	4619      	mov	r1, r3
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_GPIO_Init+0x84>)
 8001e1a:	f7fe fad0 	bl	80003be <LL_GPIO_Init>

}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	48000400 	.word	0x48000400

08001e2c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <LL_RCC_HSI_Enable+0x1c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <LL_RCC_HSI_Enable+0x1c>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <LL_RCC_HSI_IsReady+0x20>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <LL_RCC_SetSysClkSource+0x24>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 0203 	bic.w	r2, r3, #3
 8001ef4:	4904      	ldr	r1, [pc, #16]	; (8001f08 <LL_RCC_SetSysClkSource+0x24>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000

08001f0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <LL_RCC_GetSysClkSource+0x18>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000

08001f28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	4904      	ldr	r1, [pc, #16]	; (8001f4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000

08001f50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f60:	4904      	ldr	r1, [pc, #16]	; (8001f74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000

08001f78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f88:	4904      	ldr	r1, [pc, #16]	; (8001f9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000

08002000 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <LL_FLASH_SetLatency+0x24>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <LL_FLASH_SetLatency+0x24>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40022000 	.word	0x40022000

08002028 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <LL_FLASH_GetLatency+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000

08002044 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d106      	bne.n	8002060 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800205e:	e005      	b.n	800206c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <LL_SYSTICK_SetClkSource+0x34>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6013      	str	r3, [r2, #0]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e010 	.word	0xe000e010

0800207c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <LL_SYSTICK_EnableIT+0x1c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <LL_SYSTICK_EnableIT+0x1c>)
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <main>:

int left_to_right=1;
int position=0;

int main(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7ff ff94 	bl	8001fd0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80020a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020ac:	f7ff ff78 	bl	8001fa0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f7ff febb 	bl	8001e2c <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 80020b6:	f000 f86b 	bl	8002190 <SystemClock_Config>

  MX_GPIO_Init();
 80020ba:	f7ff fe73 	bl	8001da4 <MX_GPIO_Init>

  setSegments();
 80020be:	f7fe fedd 	bl	8000e7c <setSegments>
  setDigits();
 80020c2:	f7fe ff26 	bl	8000f12 <setDigits>

  LL_mDelay(2000);
 80020c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020ca:	f7fe fe35 	bl	8000d38 <LL_mDelay>

  resetDigits();
 80020ce:	f7fe ff03 	bl	8000ed8 <resetDigits>
  resetSegments();
 80020d2:	f7fe fea5 	bl	8000e20 <resetSegments>

  MX_TIM3_Init();
 80020d6:	f000 fa73 	bl	80025c0 <MX_TIM3_Init>

  while (1)
  {
	  if(left_to_right==1){
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <main+0xe4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d121      	bne.n	8002126 <main+0x8a>
		  for(int i=0; i<=3;i++){
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	e00d      	b.n	8002104 <main+0x68>
			  display[i]=name[position+i];
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <main+0xe8>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <main+0xec>)
 80020f2:	5cd1      	ldrb	r1, [r2, r3]
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <main+0xf0>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	460a      	mov	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<=3;i++){
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3301      	adds	r3, #1
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b03      	cmp	r3, #3
 8002108:	ddee      	ble.n	80020e8 <main+0x4c>
		  }
		  position=position+1;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <main+0xe8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <main+0xe8>)
 8002112:	6013      	str	r3, [r2, #0]
		  if(position+5 >= (sizeof(name)/sizeof(char))){
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <main+0xe8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3305      	adds	r3, #5
 800211a:	2b12      	cmp	r3, #18
 800211c:	d927      	bls.n	800216e <main+0xd2>
			  left_to_right=0;
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <main+0xe4>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e023      	b.n	800216e <main+0xd2>
		  }
	  }
	  else if(left_to_right==0){
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <main+0xe4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11f      	bne.n	800216e <main+0xd2>
		  for(int i=3; i>=0;i--){
 800212e:	2303      	movs	r3, #3
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	e00d      	b.n	8002150 <main+0xb4>
			  display[i]=name[position+i];
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <main+0xe8>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <main+0xec>)
 800213e:	5cd1      	ldrb	r1, [r2, r3]
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <main+0xf0>)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	4413      	add	r3, r2
 8002146:	460a      	mov	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
		  for(int i=3; i>=0;i--){
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3b01      	subs	r3, #1
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	daee      	bge.n	8002134 <main+0x98>
		  }
		  position=position-1;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <main+0xe8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <main+0xe8>)
 800215e:	6013      	str	r3, [r2, #0]
		  if(position == 0){
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <main+0xe8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <main+0xd2>
			  left_to_right=1;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <main+0xe4>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
		  }
	  }

	  displayName(display);
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <main+0xf0>)
 8002170:	f7ff fb88 	bl	8001884 <displayName>
	  LL_mDelay(500);
 8002174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002178:	f7fe fdde 	bl	8000d38 <LL_mDelay>
	  if(left_to_right==1){
 800217c:	e7ad      	b.n	80020da <main+0x3e>
 800217e:	bf00      	nop
 8002180:	20000014 	.word	0x20000014
 8002184:	20000058 	.word	0x20000058
 8002188:	20000000 	.word	0x20000000
 800218c:	20000060 	.word	0x20000060

08002190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff ff33 	bl	8002000 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800219a:	f7ff ff45 	bl	8002028 <LL_FLASH_GetLatency>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80021a4:	f000 f82c 	bl	8002200 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80021a8:	f7ff fe64 	bl	8001e74 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80021ac:	bf00      	nop
 80021ae:	f7ff fe71 	bl	8001e94 <LL_RCC_HSI_IsReady>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d1fa      	bne.n	80021ae <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80021b8:	2010      	movs	r0, #16
 80021ba:	f7ff fe7d 	bl	8001eb8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff feb2 	bl	8001f28 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fec3 	bl	8001f50 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff fed4 	bl	8001f78 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff fe87 	bl	8001ee4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80021d6:	bf00      	nop
 80021d8:	f7ff fe98 	bl	8001f0c <LL_RCC_GetSysClkSource>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1fa      	bne.n	80021d8 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <SystemClock_Config+0x6c>)
 80021e4:	f7fe fd9a 	bl	8000d1c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80021e8:	2004      	movs	r0, #4
 80021ea:	f7ff ff2b 	bl	8002044 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 80021ee:	f7ff ff45 	bl	800207c <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <SystemClock_Config+0x6c>)
 80021f4:	f7fe fdc6 	bl	8000d84 <LL_SetSystemCoreClock>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	007a1200 	.word	0x007a1200

08002200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <HardFault_Handler+0x4>

08002222 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <MemManage_Handler+0x4>

08002228 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <BusFault_Handler+0x4>

0800222e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <UsageFault_Handler+0x4>

08002234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <SysTick_Handler+0x20>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	1c50      	adds	r0, r2, #1
 800226c:	f143 0100 	adc.w	r1, r3, #0
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <SysTick_Handler+0x20>)
 8002272:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20000048 	.word	0x20000048

08002284 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <SystemInit+0x84>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <SystemInit+0x84>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <SystemInit+0x88>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <SystemInit+0x88>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <SystemInit+0x88>)
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4918      	ldr	r1, [pc, #96]	; (800230c <SystemInit+0x88>)
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <SystemInit+0x8c>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <SystemInit+0x88>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a15      	ldr	r2, [pc, #84]	; (800230c <SystemInit+0x88>)
 80022b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <SystemInit+0x88>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <SystemInit+0x88>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <SystemInit+0x88>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a0e      	ldr	r2, [pc, #56]	; (800230c <SystemInit+0x88>)
 80022d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022d6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <SystemInit+0x88>)
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	4a0b      	ldr	r2, [pc, #44]	; (800230c <SystemInit+0x88>)
 80022de:	f023 030f 	bic.w	r3, r3, #15
 80022e2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <SystemInit+0x88>)
 80022e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e8:	4908      	ldr	r1, [pc, #32]	; (800230c <SystemInit+0x88>)
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <SystemInit+0x90>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <SystemInit+0x88>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SystemInit+0x84>)
 80022f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fc:	609a      	str	r2, [r3, #8]
#endif
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	40021000 	.word	0x40021000
 8002310:	f87fc00c 	.word	0xf87fc00c
 8002314:	ff00fccc 	.word	0xff00fccc

08002318 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <NVIC_EnableIRQ+0x30>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da0b      	bge.n	8002394 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <NVIC_SetPriority+0x4c>)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	3b04      	subs	r3, #4
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002392:	e009      	b.n	80023a8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <NVIC_SetPriority+0x50>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00
 80023b8:	e000e100 	.word	0xe000e100

080023bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <LL_APB1_GRP1_EnableClock>:
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <LL_APB1_GRP1_EnableClock+0x2c>)
 800243a:	69da      	ldr	r2, [r3, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4013      	ands	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002442:	68fb      	ldr	r3, [r7, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000

08002454 <LL_TIM_EnableCounter>:
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_TIM_EnableARRPreload>:
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_TIM_OC_DisableFast>:
{
 8002494:	b4b0      	push	{r4, r5, r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d028      	beq.n	80024f6 <LL_TIM_OC_DisableFast+0x62>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d023      	beq.n	80024f2 <LL_TIM_OC_DisableFast+0x5e>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d01e      	beq.n	80024ee <LL_TIM_OC_DisableFast+0x5a>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b40      	cmp	r3, #64	; 0x40
 80024b4:	d019      	beq.n	80024ea <LL_TIM_OC_DisableFast+0x56>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024bc:	d013      	beq.n	80024e6 <LL_TIM_OC_DisableFast+0x52>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d00d      	beq.n	80024e2 <LL_TIM_OC_DisableFast+0x4e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	d007      	beq.n	80024de <LL_TIM_OC_DisableFast+0x4a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d101      	bne.n	80024da <LL_TIM_OC_DisableFast+0x46>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e00e      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024da:	2308      	movs	r3, #8
 80024dc:	e00c      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024de:	2306      	movs	r3, #6
 80024e0:	e00a      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e008      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e006      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e004      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_TIM_OC_DisableFast+0x64>
 80024f6:	2300      	movs	r3, #0
 80024f8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3318      	adds	r3, #24
 80024fe:	461a      	mov	r2, r3
 8002500:	4629      	mov	r1, r5
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <LL_TIM_OC_DisableFast+0x94>)
 8002504:	5c5b      	ldrb	r3, [r3, r1]
 8002506:	4413      	add	r3, r2
 8002508:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800250a:	6822      	ldr	r2, [r4, #0]
 800250c:	4629      	mov	r1, r5
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <LL_TIM_OC_DisableFast+0x98>)
 8002510:	5c5b      	ldrb	r3, [r3, r1]
 8002512:	4619      	mov	r1, r3
 8002514:	2304      	movs	r3, #4
 8002516:	408b      	lsls	r3, r1
 8002518:	43db      	mvns	r3, r3
 800251a:	4013      	ands	r3, r2
 800251c:	6023      	str	r3, [r4, #0]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bcb0      	pop	{r4, r5, r7}
 8002526:	4770      	bx	lr
 8002528:	08002748 	.word	0x08002748
 800252c:	08002754 	.word	0x08002754

08002530 <LL_TIM_SetClockSource>:
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002542:	f023 0307 	bic.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	609a      	str	r2, [r3, #8]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_TIM_SetTriggerOutput>:
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	605a      	str	r2, [r3, #4]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_TIM_DisableMasterSlaveMode>:
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_TIM_EnableIT_UPDATE>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80025c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2220      	movs	r2, #32
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f89f 	bl	8002720 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80025e2:	2002      	movs	r0, #2
 80025e4:	f7ff ff1e 	bl	8002424 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 80025e8:	f7ff fe96 	bl	8002318 <NVIC_GetPriorityGrouping>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2202      	movs	r2, #2
 80025f0:	2102      	movs	r1, #2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fee2 	bl	80023bc <NVIC_EncodePriority>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4619      	mov	r1, r3
 80025fc:	201d      	movs	r0, #29
 80025fe:	f7ff feb3 	bl	8002368 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002602:	201d      	movs	r0, #29
 8002604:	f7ff fe96 	bl	8002334 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8002608:	f641 733f 	movw	r3, #7999	; 0x1f3f
 800260c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800260e:	2300      	movs	r3, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 8002612:	2313      	movs	r3, #19
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800261a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261e:	4619      	mov	r1, r3
 8002620:	4817      	ldr	r0, [pc, #92]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002622:	f7fd ffd5 	bl	80005d0 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 8002626:	4816      	ldr	r0, [pc, #88]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002628:	f7ff ff24 	bl	8002474 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800262c:	2100      	movs	r1, #0
 800262e:	4814      	ldr	r0, [pc, #80]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002630:	f7ff ff7e 	bl	8002530 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002634:	2310      	movs	r3, #16
 8002636:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	461a      	mov	r2, r3
 800264c:	2101      	movs	r1, #1
 800264e:	480c      	ldr	r0, [pc, #48]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002650:	f7fe f832 	bl	80006b8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002654:	2101      	movs	r1, #1
 8002656:	480a      	ldr	r0, [pc, #40]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002658:	f7ff ff1c 	bl	8002494 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800265c:	2100      	movs	r1, #0
 800265e:	4808      	ldr	r0, [pc, #32]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002660:	f7ff ff7b 	bl	800255a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002664:	4806      	ldr	r0, [pc, #24]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002666:	f7ff ff8b 	bl	8002580 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 800266a:	4805      	ldr	r0, [pc, #20]	; (8002680 <MX_TIM3_Init+0xc0>)
 800266c:	f7ff ff98 	bl	80025a0 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <MX_TIM3_Init+0xc0>)
 8002672:	f7ff feef 	bl	8002454 <LL_TIM_EnableCounter>

}
 8002676:	bf00      	nop
 8002678:	3738      	adds	r7, #56	; 0x38
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40000400 	.word	0x40000400

08002684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002688:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800268a:	e003      	b.n	8002694 <LoopCopyDataInit>

0800268c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800268e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002690:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002692:	3104      	adds	r1, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002694:	480b      	ldr	r0, [pc, #44]	; (80026c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002698:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800269a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800269c:	d3f6      	bcc.n	800268c <CopyDataInit>
	ldr	r2, =_sbss
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80026a0:	e002      	b.n	80026a8 <LoopFillZerobss>

080026a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026a4:	f842 3b04 	str.w	r3, [r2], #4

080026a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <LoopForever+0x16>)
	cmp	r2, r3
 80026aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026ac:	d3f9      	bcc.n	80026a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026ae:	f7ff fde9 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b2:	f000 f811 	bl	80026d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026b6:	f7ff fcf1 	bl	800209c <main>

080026ba <LoopForever>:

LoopForever:
    b LoopForever
 80026ba:	e7fe      	b.n	80026ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026bc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80026c0:	08002768 	.word	0x08002768
	ldr	r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026c8:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 80026cc:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 80026d0:	20000070 	.word	0x20000070

080026d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC1_2_IRQHandler>
	...

080026d8 <__libc_init_array>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4d0d      	ldr	r5, [pc, #52]	; (8002710 <__libc_init_array+0x38>)
 80026dc:	4c0d      	ldr	r4, [pc, #52]	; (8002714 <__libc_init_array+0x3c>)
 80026de:	1b64      	subs	r4, r4, r5
 80026e0:	10a4      	asrs	r4, r4, #2
 80026e2:	2600      	movs	r6, #0
 80026e4:	42a6      	cmp	r6, r4
 80026e6:	d109      	bne.n	80026fc <__libc_init_array+0x24>
 80026e8:	4d0b      	ldr	r5, [pc, #44]	; (8002718 <__libc_init_array+0x40>)
 80026ea:	4c0c      	ldr	r4, [pc, #48]	; (800271c <__libc_init_array+0x44>)
 80026ec:	f000 f820 	bl	8002730 <_init>
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	2600      	movs	r6, #0
 80026f6:	42a6      	cmp	r6, r4
 80026f8:	d105      	bne.n	8002706 <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002700:	4798      	blx	r3
 8002702:	3601      	adds	r6, #1
 8002704:	e7ee      	b.n	80026e4 <__libc_init_array+0xc>
 8002706:	f855 3b04 	ldr.w	r3, [r5], #4
 800270a:	4798      	blx	r3
 800270c:	3601      	adds	r6, #1
 800270e:	e7f2      	b.n	80026f6 <__libc_init_array+0x1e>
 8002710:	08002760 	.word	0x08002760
 8002714:	08002760 	.word	0x08002760
 8002718:	08002760 	.word	0x08002760
 800271c:	08002764 	.word	0x08002764

08002720 <memset>:
 8002720:	4402      	add	r2, r0
 8002722:	4603      	mov	r3, r0
 8002724:	4293      	cmp	r3, r2
 8002726:	d100      	bne.n	800272a <memset+0xa>
 8002728:	4770      	bx	lr
 800272a:	f803 1b01 	strb.w	r1, [r3], #1
 800272e:	e7f9      	b.n	8002724 <memset+0x4>

08002730 <_init>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	bf00      	nop
 8002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002736:	bc08      	pop	{r3}
 8002738:	469e      	mov	lr, r3
 800273a:	4770      	bx	lr

0800273c <_fini>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr
